(use 'clojure.contrib.classpath)
(use '[clojure.contrib.repl-utils])

(defmacro with-no-length [& body]
  `(binding [*print-length* nil]
     ~@body))

(defn prints [coll]
  (with-no-length
    (doseq [x coll] (println x))))

(defn class-info [k]
  (letfn [(get-method-info [m]
	   {:name (. m getName)
	    :args (map class-simple (. m getParameterTypes))
	    :return-type (class-simple (. m getReturnType))})
	  (class-simple [k] (let [k* (. k getSimpleName)]
			      (if (= "Object" k*) "o" k*)))]
    (let [k (if (class? k) k (class k))]
      {:class k
       :methods (sort-by #(:name %) (map get-method-info (. k getMethods)))})))

(defn describe-class [k]
  (let [table (class-info k)]
    (println "==" (:class table) "==")
    (doseq [x (:methods table)] (println x))))

(defn describe-class-for-anything [k]
  (let [table (class-info k)]
   (doseq [x (:methods table)]
     (println (:name x)  (:args x) "=>" (:return-type x)))))

(defn describe-ns [ns]
  (prints (keys (ns-interns ns))))

(defn current-classpath []
  (seq (. (ClassLoader/getSystemClassLoader) getURLs)))

(set! *print-length* 10)
